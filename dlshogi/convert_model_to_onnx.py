import torch.onnx
import torch.nn.functional as F

from dlshogi.common import *
from dlshogi import serializers
from dlshogi import cppshogi
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('model')
parser.add_argument('onnx')
parser.add_argument('--gpu', '-g', type=int, default=0, help='GPU ID')
parser.add_argument('--network', type=str, default='wideresnet10', choices=['wideresnet10', 'wideresnet15', 'senet10', 'resnet10_swish', 'resnet20_swish'])
parser.add_argument('--fixed_batchsize', type=int)
args = parser.parse_args()

if args.gpu >= 0:
    torch.cuda.set_device(args.gpu)
    device = torch.device("cuda")
else:
    device = torch.device("cpu")

if args.network == 'wideresnet10':
    from dlshogi.policy_value_network import *
elif args.network == 'wideresnet15':
    from dlshogi.policy_value_network_wideresnet15 import *
elif args.network == 'senet10':
    from dlshogi.policy_value_network_senet10 import *
elif args.network == 'resnet10_swish':
    from dlshogi.policy_value_network_resnet10_swish import *
elif args.network == 'resnet20_swish':
    from dlshogi.policy_value_network_resnet20_swish import *
baseclass = PolicyValueNetwork

class PolicyValueNetworkAddSigmoid(baseclass):
    def __init__(self):
        super(PolicyValueNetworkAddSigmoid, self).__init__()

    def __call__(self, x1, x2):
        y1, y2 = super(PolicyValueNetworkAddSigmoid, self).__call__(x1, x2)
        return y1[:,(0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,160,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,178,180,181,182,183,184,185,186,187,189,190,191,192,193,194,195,196,198,199,200,201,202,203,204,205,207,208,209,210,211,212,213,214,216,217,218,219,220,221,222,223,225,226,227,228,229,230,231,232,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,406,407,408,409,410,411,412,413,415,416,417,418,419,420,421,422,424,425,426,427,428,429,430,431,433,434,435,436,437,438,439,440,442,443,444,445,446,447,448,449,451,452,453,454,455,456,457,458,460,461,462,463,464,465,466,467,469,470,471,472,473,474,475,476,478,479,480,481,482,483,484,485,496,497,498,499,500,501,502,503,505,506,507,508,509,510,511,512,514,515,516,517,518,519,520,521,523,524,525,526,527,528,529,530,532,533,534,535,536,537,538,539,541,542,543,544,545,546,547,548,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,568,569,570,571,572,573,574,575,577,578,579,580,581,582,583,584,586,587,588,589,590,591,592,593,595,596,597,598,599,600,601,602,604,605,606,607,608,609,610,611,613,614,615,616,617,618,619,620,622,623,624,625,626,627,628,629,631,632,633,634,635,636,637,638,659,660,661,662,663,668,669,670,671,672,677,678,679,680,681,686,687,688,689,690,695,696,697,698,699,704,705,706,707,708,713,714,715,716,717,722,723,724,725,726,731,732,733,734,735,740,741,742,743,744,749,750,751,752,753,758,759,760,761,762,767,768,769,770,771,776,777,778,779,780,785,786,787,788,789,794,795,796,797,798,810,811,812,819,820,821,828,829,830,837,838,839,846,847,848,855,856,857,864,865,866,873,874,875,882,883,884,900,901,902,909,910,911,918,919,920,927,928,929,936,937,938,945,946,947,954,955,956,963,964,965,972,973,974,981,982,983,990,991,992,999,1000,1001,1008,1009,1010,1017,1018,1019,1026,1027,1028,1035,1036,1037,1062,1063,1064,1071,1072,1073,1080,1081,1082,1089,1090,1091,1098,1099,1100,1107,1108,1109,1116,1117,1118,1125,1126,1127,1134,1135,1136,1143,1144,1145,1152,1153,1154,1161,1162,1163,1170,1171,1172,1179,1180,1181,1188,1189,1190,1197,1198,1199,1216,1217,1218,1219,1220,1221,1222,1223,1225,1226,1227,1228,1229,1230,1231,1232,1234,1235,1236,1237,1238,1239,1240,1241,1243,1244,1245,1246,1247,1248,1249,1250,1252,1253,1254,1255,1256,1257,1258,1259,1261,1262,1263,1264,1265,1266,1267,1268,1270,1271,1272,1273,1274,1275,1276,1277,1279,1280,1281,1282,1283,1284,1285,1286,1288,1289,1290,1291,1292,1293,1294,1295,1306,1307,1308,1315,1316,1317,1318,1324,1325,1326,1327,1328,1333,1334,1335,1336,1337,1338,1342,1343,1344,1345,1346,1347,1348,1351,1352,1353,1354,1355,1356,1357,1358,1360,1361,1362,1363,1364,1365,1366,1367,1369,1370,1371,1372,1373,1374,1375,1376,1378,1379,1380,1381,1382,1383,1384,1385,1387,1388,1389,1390,1391,1392,1393,1394,1396,1397,1398,1399,1400,1401,1402,1403,1405,1406,1407,1408,1409,1410,1411,1414,1415,1416,1417,1418,1419,1423,1424,1425,1426,1427,1432,1433,1434,1435,1441,1442,1443,1467,1468,1469,1476,1477,1478,1485,1486,1487,1494,1495,1496,1503,1504,1505,1512,1513,1514,1521,1522,1523,1530,1531,1532,1539,1540,1541,1548,1549,1550,1557,1558,1559,1566,1567,1568,1575,1576,1577,1584,1585,1586,1593,1594,1595,1602,1603,1604,1621,1622,1623,1624,1625,1626,1627,1628,1630,1631,1632,1633,1634,1635,1636,1637,1639,1640,1641,1642,1643,1644,1645,1646,1648,1649,1650,1651,1652,1653,1654,1655,1657,1658,1659,1660,1661,1662,1663,1664,1666,1667,1668,1669,1670,1671,1672,1673,1675,1676,1677,1678,1679,1680,1681,1682,1684,1685,1686,1687,1688,1689,1690,1691,1693,1694,1695,1696,1697,1698,1699,1700,1702,1703,1704,1705,1706,1707,1708,1709,1711,1712,1713,1714,1715,1716,1717,1718,1720,1721,1722,1723,1724,1725,1726,1727,1729,1730,1731,1732,1733,1734,1735,1736,1738,1739,1740,1741,1742,1743,1744,1745,1747,1748,1749,1750,1751,1752,1753,1754,1756,1757,1758,1759,1760,1761,1762,1763,1765,1766,1767,1768,1769,1770,1771,1772,1774,1775,1776,1777,1778,1779,1780,1781,1784,1785,1786,1787,1788,1789,1790,1793,1794,1795,1796,1797,1798,1799,1802,1803,1804,1805,1806,1807,1808,1811,1812,1813,1814,1815,1816,1817,1820,1821,1822,1823,1824,1825,1826,1829,1830,1831,1832,1833,1834,1835,1838,1839,1840,1841,1842,1843,1844,1847,1848,1849,1850,1851,1852,1853,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186)
], torch.sigmoid(y2)

model = PolicyValueNetworkAddSigmoid()
if args.network.endswith('_swish'):
    model.set_swish(False)
model.to(device)

serializers.load_npz(args.model, model)
model.eval()

def mini_batch(hcpevec):
    features1 = np.empty((len(hcpevec), FEATURES1_NUM, 9, 9), dtype=np.float32)
    features2 = np.empty((len(hcpevec), FEATURES2_NUM, 9, 9), dtype=np.float32)
    move = np.empty((len(hcpevec)), dtype=np.int32)
    result = np.empty((len(hcpevec)), dtype=np.float32)
    value = np.empty((len(hcpevec)), dtype=np.float32)

    cppshogi.hcpe_decode_with_value(hcpevec, features1, features2, move, result, value)

    z = result.astype(np.float32) - value + 0.5

    return (torch.tensor(features1).to(device),
            torch.tensor(features2).to(device),
            torch.tensor(move.astype(np.int64)).to(device),
            torch.tensor(result.reshape((len(hcpevec), 1))).to(device),
            torch.tensor(z).to(device),
            torch.tensor(value.reshape((len(value), 1))).to(device)
            )

batchsize = 1 if args.fixed_batchsize is None else args.fixed_batchsize
hcpevec = np.array([([ 88, 164,  73,  33,  12, 215,  87,  33, 126, 142,  77,  33,  44, 175,  66, 120,  20, 194, 171,  16, 158,  77,  33,  44, 215,  95,  33,  62, 142,  73,  33,  12], 0, 7739, 1, 0)] * batchsize, HuffmanCodedPosAndEval)
x1, x2, t1, t2, z, value = mini_batch(hcpevec)

if args.fixed_batchsize is None:
    torch.onnx.export(model, (x1, x2), args.onnx,
        verbose = True,
        do_constant_folding = True,
        input_names = ['input1', 'input2'],
        output_names = ['output_policy', 'output_value'],
        dynamic_axes={
            'input1' : {0 : 'batch_size'},
            'input2' : {0 : 'batch_size'},
            'output_policy' : {0 : 'batch_size'},
            'output_value' : {0 : 'batch_size'},
            })
else:
    torch.onnx.export(model, (x1, x2), args.onnx,
        verbose = True,
        do_constant_folding = True,
        input_names = ['input1', 'input2'],
        output_names = ['output_policy', 'output_value'])
