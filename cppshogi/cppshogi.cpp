#include <numeric>
#include <algorithm>

#include "cppshogi.h"

void make_input_features(const Position& position, bags_t bags) {
	const auto turn = position.turn();
	const Bitboard occupied_bb = position.occupiedBB();

	// 初期化
	std::fill_n(bags, MAX_BAG_SIZE, 0);

	// 歩と歩以外に分ける
	Bitboard pawns_bb = position.bbOf(Pawn);
	Bitboard without_pawns_bb = occupied_bb & ~pawns_bb;
	// 利き数集計用
	int attack_num[ColorNum][SquareNum] = {};

	// 歩以外
	FOREACH_BB(without_pawns_bb, Square sq, {
		const Piece pc = position.piece(sq);
		const PieceType pt = pieceToPieceType(pc);
		Color c = pieceToColor(pc);
		Bitboard attacks = Position::attacksFrom(pt, c, sq, occupied_bb);

		// 後手の場合、色を反転し、盤面を180度回転
		if (turn == White) {
			c = oppositeColor(c);
			sq = SQ99 - sq;
		}

		// 駒の配置
		bags[offsets[sq]] = pt + PIECETYPE_NUM * c;

		FOREACH_BB(attacks, Square to, {
			// 後手の場合、盤面を180度回転
			if (turn == White) to = SQ99 - to;

			// 駒の利き
			bags[offsets[to] + pt + PIECETYPE_NUM * c] = PIECETYPE_NUM * 2 + pt + PIECETYPE_NUM * c;

			// 利き数
			auto& num = attack_num[c][to];
			if (num < MAX_ATTACK_NUM) {
				bags[offsets[to] + 1 + PIECETYPE_NUM * 2 + num + MAX_ATTACK_NUM * c] = 1 + PIECETYPE_NUM * 2 + num + MAX_ATTACK_NUM * c;
				num++;
			}
		});
	});

	for (Color c = Black; c < ColorNum; ++c) {
		// 後手の場合、色を反転
		const Color c2 = turn == Black ? c : oppositeColor(c);

		// 歩
		Bitboard pawns_bb2 = pawns_bb & position.bbOf(c2);
		const SquareDelta pawnDelta = c == Black ? DeltaN : DeltaS;
		FOREACH_BB(pawns_bb2, Square sq, {
			// 後手の場合、盤面を180度回転
			if (turn == White) sq = SQ99 - sq;

			// 駒の配置
			bags[offsets[sq]] = Pawn + PIECETYPE_NUM * c2;

			// 駒の利き
			const Square to = sq + pawnDelta; // 1マス先
			bags[offsets[to] + Pawn + PIECETYPE_NUM * c2] = PIECETYPE_NUM * 2 + Pawn + PIECETYPE_NUM * c2;

			// 利き数
			auto& num = attack_num[c][to];
			if (num < MAX_ATTACK_NUM) {
				bags[offsets[to] + 1 + PIECETYPE_NUM * 2 + num + MAX_ATTACK_NUM * c2] = 1 + PIECETYPE_NUM * 2 + num + MAX_ATTACK_NUM * c2;
				num++;
			}
		});

		// 持ち駒
		const Hand hand = position.hand(c);
		size_t offset = 0;
		for (HandPiece hp = HPawn; hp < HandPieceNum; ++hp) {
			u32 num = hand.numOf(hp);
			if (num >= MAX_PIECES_IN_HAND[hp]) {
				num = MAX_PIECES_IN_HAND[hp];
			}
			for (u32 n = 0; n < num; ++n) {
				bags[offsets[(size_t)SquareNum + hp + (size_t)HandPieceNum * (size_t)c2] + n] = (int8_t)(1 + PIECETYPE_NUM * 4 + MAX_ATTACK_NUM * 2 + offset + n + HAND_WORD_SIZE * (size_t)c2);
			}
			offset += MAX_PIECES_IN_HAND[hp];
		}
	}

	// is check
	if (position.inCheck()) {
		bags[offsets[(size_t)SquareNum + (size_t)HandPieceNum * (size_t)2]] = 1 + PIECETYPE_NUM * 4 + MAX_ATTACK_NUM * 2 + HAND_WORD_SIZE * 2;
	}
}

inline MOVE_DIRECTION get_move_direction(const int dir_x, const int dir_y) {
	if (dir_y < 0 && dir_x == 0) {
		return UP;
	}
	else if (dir_y == -2 && dir_x == -1) {
		return UP2_LEFT;
	}
	else if (dir_y == -2 && dir_x == 1) {
		return UP2_RIGHT;
	}
	else if (dir_y < 0 && dir_x < 0) {
		return UP_LEFT;
	}
	else if (dir_y < 0 && dir_x > 0) {
		return UP_RIGHT;
	}
	else if (dir_y == 0 && dir_x < 0) {
		return LEFT;
	}
	else if (dir_y == 0 && dir_x > 0) {
		return RIGHT;
	}
	else if (dir_y > 0 && dir_x == 0) {
		return DOWN;
	}
	else if (dir_y > 0 && dir_x < 0) {
		return DOWN_LEFT;
	}
	else /* if (dir_y > 0 && dir_x > 0) */ {
		return DOWN_RIGHT;
	}
}

constexpr int move_label_table[MAX_MOVE_LABEL_NUM][SquareNum] = {
	{ 0, 1, 2, 3, 4, 5, 6, 7, -1, 8, 9, 10, 11, 12, 13, 14, 15, -1, 16, 17, 18, 19, 20, 21, 22, 23, -1, 24, 25, 26, 27, 28, 29, 30, 31, -1, 32, 33, 34, 35, 36, 37, 38, 39, -1, 40, 41, 42, 43, 44, 45, 46, 47, -1, 48, 49, 50, 51, 52, 53, 54, 55, -1, 56, 57, 58, 59, 60, 61, 62, 63, -1, 64, 65, 66, 67, 68, 69, 70, 71, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 73, 74, 75, 76, 77, 78, 79, -1, 80, 81, 82, 83, 84, 85, 86, 87, -1, 88, 89, 90, 91, 92, 93, 94, 95, -1, 96, 97, 98, 99, 100, 101, 102, 103, -1, 104, 105, 106, 107, 108, 109, 110, 111, -1, 112, 113, 114, 115, 116, 117, 118, 119, -1, 120, 121, 122, 123, 124, 125, 126, 127, -1, 128, 129, 130, 131, 132, 133, 134, 135, -1 },
	{ 136, 137, 138, 139, 140, 141, 142, 143, -1, 144, 145, 146, 147, 148, 149, 150, 151, -1, 152, 153, 154, 155, 156, 157, 158, 159, -1, 160, 161, 162, 163, 164, 165, 166, 167, -1, 168, 169, 170, 171, 172, 173, 174, 175, -1, 176, 177, 178, 179, 180, 181, 182, 183, -1, 184, 185, 186, 187, 188, 189, 190, 191, -1, 192, 193, 194, 195, 196, 197, 198, 199, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271 },
	{ 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, 344, 345, 346, 347, 348, 349, 350, 351, -1, 352, 353, 354, 355, 356, 357, 358, 359, -1, 360, 361, 362, 363, 364, 365, 366, 367, -1, 368, 369, 370, 371, 372, 373, 374, 375, -1, 376, 377, 378, 379, 380, 381, 382, 383, -1, 384, 385, 386, 387, 388, 389, 390, 391, -1, 392, 393, 394, 395, 396, 397, 398, 399, -1, 400, 401, 402, 403, 404, 405, 406, 407, -1, 408, 409, 410, 411, 412, 413, 414, 415 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 416, 417, 418, 419, 420, 421, 422, 423, -1, 424, 425, 426, 427, 428, 429, 430, 431, -1, 432, 433, 434, 435, 436, 437, 438, 439, -1, 440, 441, 442, 443, 444, 445, 446, 447, -1, 448, 449, 450, 451, 452, 453, 454, 455, -1, 456, 457, 458, 459, 460, 461, 462, 463, -1, 464, 465, 466, 467, 468, 469, 470, 471, -1, 472, 473, 474, 475, 476, 477, 478, 479 },
	{ -1, 480, 481, 482, 483, 484, 485, 486, 487, -1, 488, 489, 490, 491, 492, 493, 494, 495, -1, 496, 497, 498, 499, 500, 501, 502, 503, -1, 504, 505, 506, 507, 508, 509, 510, 511, -1, 512, 513, 514, 515, 516, 517, 518, 519, -1, 520, 521, 522, 523, 524, 525, 526, 527, -1, 528, 529, 530, 531, 532, 533, 534, 535, -1, 536, 537, 538, 539, 540, 541, 542, 543, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 544, 545, 546, 547, 548, -1, -1, -1, -1, 549, 550, 551, 552, 553, -1, -1, -1, -1, 554, 555, 556, 557, 558, -1, -1, -1, -1, 559, 560, 561, 562, 563, -1, -1, -1, -1, 564, 565, 566, 567, 568, -1, -1, -1, -1, 569, 570, 571, 572, 573, -1, -1, -1, -1, 574, 575, 576, 577, 578, -1, -1, -1, -1, 579, 580, 581, 582, 583, -1, -1 },
	{ -1, -1, 584, 585, 586, 587, 588, -1, -1, -1, -1, 589, 590, 591, 592, 593, -1, -1, -1, -1, 594, 595, 596, 597, 598, -1, -1, -1, -1, 599, 600, 601, 602, 603, -1, -1, -1, -1, 604, 605, 606, 607, 608, -1, -1, -1, -1, 609, 610, 611, 612, 613, -1, -1, -1, -1, 614, 615, 616, 617, 618, -1, -1, -1, -1, 619, 620, 621, 622, 623, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ 624, 625, 626, -1, -1, -1, -1, -1, -1, 627, 628, 629, -1, -1, -1, -1, -1, -1, 630, 631, 632, -1, -1, -1, -1, -1, -1, 633, 634, 635, -1, -1, -1, -1, -1, -1, 636, 637, 638, -1, -1, -1, -1, -1, -1, 639, 640, 641, -1, -1, -1, -1, -1, -1, 642, 643, 644, -1, -1, -1, -1, -1, -1, 645, 646, 647, -1, -1, -1, -1, -1, -1, 648, 649, 650, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 651, 652, 653, -1, -1, -1, -1, -1, -1, 654, 655, 656, -1, -1, -1, -1, -1, -1, 657, 658, 659, -1, -1, -1, -1, -1, -1, 660, 661, 662, -1, -1, -1, -1, -1, -1, 663, 664, 665, -1, -1, -1, -1, -1, -1, 666, 667, 668, -1, -1, -1, -1, -1, -1, 669, 670, 671, -1, -1, -1, -1, -1, -1, 672, 673, 674, -1, -1, -1, -1, -1, -1 },
	{ 675, 676, 677, -1, -1, -1, -1, -1, -1, 678, 679, 680, -1, -1, -1, -1, -1, -1, 681, 682, 683, -1, -1, -1, -1, -1, -1, 684, 685, 686, -1, -1, -1, -1, -1, -1, 687, 688, 689, -1, -1, -1, -1, -1, -1, 690, 691, 692, -1, -1, -1, -1, -1, -1, 693, 694, 695, -1, -1, -1, -1, -1, -1, 696, 697, 698, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 699, 700, 701, -1, -1, -1, -1, -1, -1, 702, 703, 704, -1, -1, -1, -1, -1, -1, 705, 706, 707, -1, -1, -1, -1, -1, -1, 708, 709, 710, -1, -1, -1, -1, -1, -1, 711, 712, 713, -1, -1, -1, -1, -1, -1, 714, 715, 716, -1, -1, -1, -1, -1, -1, 717, 718, 719, -1, -1, -1, -1, -1, -1, 720, 721, 722, -1, -1, -1, -1, -1, -1 },
	{ 723, 724, 725, -1, -1, -1, -1, -1, -1, 726, 727, 728, -1, -1, -1, -1, -1, -1, 729, 730, 731, -1, -1, -1, -1, -1, -1, 732, 733, 734, -1, -1, -1, -1, -1, -1, 735, 736, 737, -1, -1, -1, -1, -1, -1, 738, 739, 740, -1, -1, -1, -1, -1, -1, 741, 742, 743, -1, -1, -1, -1, -1, -1, 744, 745, 746, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, 747, 748, 749, 750, 751, 752, 753, 754, -1, 755, 756, 757, 758, 759, 760, 761, 762, -1, 763, 764, 765, 766, 767, 768, 769, 770, -1, 771, 772, 773, 774, 775, 776, 777, 778, -1, 779, 780, 781, 782, 783, 784, 785, 786, -1, 787, 788, 789, 790, 791, 792, 793, 794, -1, 795, 796, 797, 798, 799, 800, 801, 802, -1, 803, 804, 805, 806, 807, 808, 809, 810, -1, 811, 812, 813, 814, 815, 816, 817, 818 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 819, 820, 821, -1, -1, -1, -1, -1, -1, 822, 823, 824, 825, -1, -1, -1, -1, -1, 826, 827, 828, 829, 830, -1, -1, -1, -1, 831, 832, 833, 834, 835, 836, -1, -1, -1, 837, 838, 839, 840, 841, 842, 843, -1, -1, 844, 845, 846, 847, 848, 849, 850, 851, -1, 852, 853, 854, 855, 856, 857, 858, 859, -1, 860, 861, 862, 863, 864, 865, 866, 867 },
	{ -1, 868, 869, 870, 871, 872, 873, 874, 875, -1, 876, 877, 878, 879, 880, 881, 882, 883, -1, 884, 885, 886, 887, 888, 889, 890, 891, -1, 892, 893, 894, 895, 896, 897, 898, -1, -1, 899, 900, 901, 902, 903, 904, -1, -1, -1, 905, 906, 907, 908, 909, -1, -1, -1, -1, 910, 911, 912, 913, -1, -1, -1, -1, -1, 914, 915, 916, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 917, 918, 919, -1, -1, -1, -1, -1, -1, 920, 921, 922, -1, -1, -1, -1, -1, -1, 923, 924, 925, -1, -1, -1, -1, -1, -1, 926, 927, 928, -1, -1, -1, -1, -1, -1, 929, 930, 931, -1, -1, -1, -1, -1, -1, 932, 933, 934, -1, -1, -1, -1, -1, -1, 935, 936, 937, -1, -1, -1, -1, -1, -1, 938, 939, 940, -1, -1, -1, -1, -1, -1 },
	{ 941, 942, 943, -1, -1, -1, -1, -1, -1, 944, 945, 946, -1, -1, -1, -1, -1, -1, 947, 948, 949, -1, -1, -1, -1, -1, -1, 950, 951, 952, -1, -1, -1, -1, -1, -1, 953, 954, 955, -1, -1, -1, -1, -1, -1, 956, 957, 958, -1, -1, -1, -1, -1, -1, 959, 960, 961, -1, -1, -1, -1, -1, -1, 962, 963, 964, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, 965, 966, 967, 968, 969, 970, 971, 972, -1, 973, 974, 975, 976, 977, 978, 979, 980, -1, 981, 982, 983, 984, 985, 986, 987, 988, -1, 989, 990, 991, 992, 993, 994, 995, 996, -1, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, -1, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, -1, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, -1, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, -1, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036 },
	{ -1, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, -1, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, -1, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, -1, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, -1, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, -1, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, -1, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, -1, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, -1, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108 },
	{ -1, -1, 1109, 1110, 1111, 1112, 1113, 1114, 1115, -1, -1, 1116, 1117, 1118, 1119, 1120, 1121, 1122, -1, -1, 1123, 1124, 1125, 1126, 1127, 1128, 1129, -1, -1, 1130, 1131, 1132, 1133, 1134, 1135, 1136, -1, -1, 1137, 1138, 1139, 1140, 1141, 1142, 1143, -1, -1, 1144, 1145, 1146, 1147, 1148, 1149, 1150, -1, -1, 1151, 1152, 1153, 1154, 1155, 1156, 1157, -1, -1, 1158, 1159, 1160, 1161, 1162, 1163, 1164, -1, -1, 1165, 1166, 1167, 1168, 1169, 1170, 1171 },
	{ 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252 },
	{ 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333 },
	{ 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414 },
	{ 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495 },
};

int make_move_label(const u16 move16, const Color color) {
	// see: move.hpp : 30
	// xxxxxxxx x1111111  移動先
	// xx111111 1xxxxxxx  移動元。駒打ちの際には、PieceType + SquareNum - 1
	// x1xxxxxx xxxxxxxx  1 なら成り
	u16 to_sq = move16 & 0b1111111;
	u16 from_sq = (move16 >> 7) & 0b1111111;

	if (from_sq < SquareNum) {
		// 白の場合、盤面を180度回転
		if (color == White) {
			to_sq = (u16)SQ99 - to_sq;
			from_sq = (u16)SQ99 - from_sq;
		}

		const div_t to_d = div(to_sq, 9);
		const int to_x = to_d.quot;
		const int to_y = to_d.rem;
		const div_t from_d = div(from_sq, 9);
		const int from_x = from_d.quot;
		const int from_y = from_d.rem;
		const int dir_x = from_x - to_x;
		const int dir_y = to_y - from_y;

		MOVE_DIRECTION move_direction = get_move_direction(dir_x, dir_y);

		// promote
		if ((move16 & 0b100000000000000) > 0) {
			move_direction = MOVE_DIRECTION_PROMOTED[move_direction];
		}
		const auto move_label = move_label_table[move_direction][to_sq];
		assert(move_label >= 0 && move_label <= 964);
		return move_label;
	}
	// 持ち駒の場合
	else {
		// 白の場合、盤面を180度回転
		if (color == White) {
			to_sq = (u16)SQ99 - to_sq;
		}
		const int hand_piece = from_sq - (int)SquareNum;
		const int move_direction_label = MOVE_DIRECTION_NUM + hand_piece;
		const auto move_label = move_label_table[move_direction_label][to_sq];
		assert(move_label >= 965 && move_label <= 1495);
		return move_label;
	}
}
